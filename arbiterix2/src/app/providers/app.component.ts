import{ChangeDetectionStrategy,ChangeDetectorRef,Component,OnDestroy,OnInit,ViewChild}from '@angular/core';import{BrowserModule}from '@angular/platform-browser';import{Columns,Config,DefaultConfig}from 'ngx-easy-table';import{NgModule,CUSTOM_ELEMENTS_SCHEMA}from '@angular/core';import{interval,Observable,Subject,timer}from 'rxjs';import{map,takeUntil}from 'rxjs/operators';import{HomeComponent}from './home/home.component';import{PancakeService,pancakePairPrice,pancakeTokenMap}from './providers/pancake.service';import{ApeService,apePairPrice,apeTokenMap}from './providers/ape.service';import{BakeryService,bakeryPairPrice,bakeryTokenMap}from './providers/bakery.service';import{data1 as _data1,data2 as _data2,columns as _columns}from './constants/data/table_data';import{JsonEncoderService,jsonStr}from './workers/json-encoder.service';import{NgxDatatableModule,ColumnMode}from '@swimlane/ngx-datatable';export let arbentina:string;interface Data{status:string;amount:number;company:string;limit:number;balance:number}
@Component({selector:'app-root',templateUrl:'./app.component.html',styleUrls:['./app.component.css'],changeDetection:ChangeDetectionStrategy.OnPush})export class AppComponent{@ViewChild('mydatatable')mydatatable:any;columns1=[{prop:'exchange'},{name:'token'},{name:'value'}];columns2=[{prop:'name',name:'Name'},{name:'Gender'}];ColumnMode=ColumnMode;rows1=[{exchange:'arbentinaswap',token:'arbentina gold',value:'.00001'}];rows2=[{name:'Callie',gender:'Female'}];constructor(private cd:ChangeDetectorRef,private cdr:ChangeDetectorRef,public cake:PancakeService,public bake:BakeryService,public ape:ApeService,public jsonEncoderServer:JsonEncoderService){}
ops:number=0;source=timer(100,1000).subscribe(async(x)=>{switch(this.ops){case 0:arbentina="wbnb";this.cake.conventionSwitch(arbentina);this.bake.conventionSwitch(arbentina);this.ape.conventionSwitch(arbentina);this.rows1[0]={exchange:'pancake',token:"wbnb",value:pancakeTokenMap.wbnb.toString()}
this.rows1[1]={exchange:'bakery',token:"wbnb",value:bakeryTokenMap.wbnb.toString()}
this.rows1[2]={exchange:'ape',token:"wbnb",value:apeTokenMap.wbnb.toString()}
this.ops=1;this.rows1=[...this.rows1];break;case 1:arbentina="shiba";this.cake.conventionSwitch(arbentina);this.rows1[3]={exchange:'pancake',token:"shiba",value:pancakeTokenMap.shiba.toString()}
this.bake.conventionSwitch(arbentina);this.rows1[4]={exchange:'bakery',token:"shiba",value:bakeryTokenMap.shiba.toString()}
this.ape.conventionSwitch(arbentina);this.rows1[5]={exchange:'ape',token:"shiba",value:apeTokenMap.shiba.toString()}
this.ops=0;this.rows1=[...this.rows1];break;case 2:arbentina="eth";this.cake.conventionSwitch(arbentina);this.rows1[6]={exchange:'pancake',token:arbentina,value:pancakeTokenMap[arbentina].toString()}
this.bake.conventionSwitch(arbentina);this.rows1[7]={exchange:'bakery',token:arbentina,value:(bakeryPairPrice).toString()}
this.ape.conventionSwitch(arbentina);this.rows1[8]={exchange:'ape',token:arbentina,value:(apePairPrice).toString()}
this.ops=0;this.rows1=[...this.rows1];break;default:console.log("Invalid operator")}
this.rows1.push();this.cd.markForCheck()})}
