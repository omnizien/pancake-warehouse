import{Injectable}from '@angular/core';import{ethers}from 'ethers';import{default as sub_cons}from '../constants/token-lists/sub_cons.json';import{default as pop_cons}from '../constants/token-lists/pop_cons.json';import{signer}from '../constants/constants';import{pair_abi,factory_abi,routerV2_abi}from '../constants/abis/triangular.ABI';import{ape_address}from '../constants/addresses/addresses';import{apeRouter}from '../constants/router/routers';import{_tokenAddress,bscscan}from './bsscan';import{JsonEncoderService}from '../workers/json-encoder.service';export let apePairPrice1:number=0;export let apePairPrice2:number=0;export let apePairPrice3:number=0;export let apeSwapTokenName:string;type MapType={[id:string]:string}
export let apeTokenMap:MapType={};@Injectable({providedIn:'root'})
export class ApeService{gas_price!:ethers.BigNumber;factory1!:ethers.Contract;factory2!:ethers.Contract;factory3!:ethers.Contract;Mouter!:ethers.Contract;constructor(){}public async conventionSwitch(ops:string){apeSwapTokenName=ops;switch(ops){case 'wbnb':this.tok0();console.log("complete");break;case 'shiba':this.tok1();break;case 'eth':this.tok2();break;default:console.log('Invalid operator')}}public async tok0(){apeSwapTokenName='wbnb';this.factory1=new ethers.Contract(ape_address,factory_abi,signer);const getPair_0=await this.factory1.getPair(pop_cons.wbnb,pop_cons.busd);const invokePair_0=new ethers.Contract(getPair_0,pair_abi,signer);const reserves_0=await invokePair_0.getReserves();const _reserve0_0=Number(ethers.utils.formatUnits(reserves_0[0],18));const _reserve1_0=Number(ethers.utils.formatUnits(reserves_0[1],18));const balanceOf_0=1;const cumulative_0=_reserve1_0/_reserve0_0;const withBalanceOf_0=cumulative_0*balanceOf_0;const _apePairPrice0_0=withBalanceOf_0-(0.2*withBalanceOf_0)/100;apeTokenMap.wbnb=(apePairPrice1.toString());console.log(apeTokenMap)
apePairPrice1=_apePairPrice0_0;console.log(" apePairPrice1 "+apePairPrice1)}public async tok1(){apeSwapTokenName='shiba';this.factory1=new ethers.Contract(ape_address,factory_abi,signer);const getPair_0=await this.factory1.getPair(sub_cons.shiba,pop_cons.busd);const invokePair_0=new ethers.Contract(getPair_0,pair_abi,signer);const reserves_0=await invokePair_0.getReserves();const _reserve0_0=Number(ethers.utils.formatUnits(reserves_0[0],18));const _reserve1_0=Number(ethers.utils.formatUnits(reserves_0[1],18));const balanceOf_0=1;const cumulative_0=_reserve1_0/_reserve0_0;const withBalanceOf_0=cumulative_0*balanceOf_0;const _apePairPrice0_0=withBalanceOf_0-(0.2*withBalanceOf_0)/100;apeTokenMap.shiba=(apePairPrice2.toString());console.log(apeTokenMap)
apePairPrice2=_apePairPrice0_0;console.log(" apePairPrice1 "+apePairPrice2)}public async tok2(){apeSwapTokenName='eth';this.factory1=new ethers.Contract(ape_address,factory_abi,signer);const getPair_0=await this.factory1.getPair(pop_cons.busd,pop_cons.eth);const invokePair_0=new ethers.Contract(getPair_0,pair_abi,signer);const reserves_0=await invokePair_0.getReserves();const _reserve0_0=Number(ethers.utils.formatUnits(reserves_0[0],18));const _reserve1_0=Number(ethers.utils.formatUnits(reserves_0[1],18));const balanceOf_0=1;const cumulative_0=_reserve1_0/_reserve0_0;const withBalanceOf_0=cumulative_0*balanceOf_0;const _apePairPrice0_0=withBalanceOf_0-(0.3*withBalanceOf_0)/100;apeTokenMap.eth=(apePairPrice3.toString());console.log(apeTokenMap)
apePairPrice3=_apePairPrice0_0;console.log(" apePairPrice2 "+apePairPrice3)}
async router(){this.Mouter=new ethers.Contract(apeRouter,routerV2_abi,signer)}}
