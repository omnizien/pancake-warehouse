price_impact(){const poolAddress='0xa39af17ce4a8eb807e076805da1e2b8ea7d0755b';const poolContract=new ethers.Contract(poolAddress,['function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)'],signer);poolContract.getReserves().then((reserves:{_reserve0:ethers.BigNumberish;_reserve1:ethers.BigNumberish})=>{let reserve_a_initial=parseFloat(utils.formatUnits(reserves._reserve0));let reserve_b_initial=parseFloat(utils.formatUnits(reserves._reserve1));console.log(`CAKE in pool: ${reserve_a_initial}`);console.log(`USDT in pool: ${reserve_b_initial}`);const fee=0.02;let max_price_impact=0.001;let amount_traded_cake=reserve_a_initial*max_price_impact/((1-max_price_impact)*(1-fee));let amount_traded_usdt=reserve_b_initial*max_price_impact/((1-max_price_impact)*(1-fee));console.log(`Given a max price impact of ${max_price_impact*100}%, the max amount of CAKE tradeable is ${amount_traded_cake}`);console.log(`Given a max price impact of ${max_price_impact*100}%, the max amount of USDT tradeable is ${amount_traded_usdt}`);let amountInCAKE=amount_traded_cake*(1-fee);let amountInUSDT=amount_traded_usdt*(1-fee);let price_impact_trade_cake=amountInCAKE/(reserve_a_initial+amountInCAKE);let price_impact_trade_usdt=amountInUSDT/(reserve_b_initial+amountInUSDT);console.log(`Price impact when trading ${amount_traded_cake} CAKE: ${price_impact_trade_cake*100}%`);console.log(`Price impact when trading ${amount_traded_usdt} USDT: ${price_impact_trade_usdt * 100}%`)}).catch(console.error)
